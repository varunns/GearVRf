/*
 * Copyright 2016 Samsung Electronics Co., LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: XmlValidator

repositories {
    flatDir {
        dirs '../../../Framework/framework/src/main/libs/',
        '../../../Framework/framework/build/outputs/aar/'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:21.0.0'
    compile(name: 'framework-debug', ext: 'aar')
}

//TODO export plugin to jar
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

class XmlValidator implements Plugin<Project> {
    void apply(Project project) {
        project.task('validateXml') << {
            println 'Validating settings.xml file'
            File xml = project.file('src/main/assets/settings.xml');
            File xsd = project.file('src/main/res/xml/settings_schema.xsd');

            def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            def schema = factory.newSchema(xsd);
            def validator = schema.newValidator();
            validator.validate(new StreamSource(xml));
        }
    }
}

preBuild.dependsOn validateXml

assembleDebug {}.doLast {
    task copyAARFiles(type: Copy) {
        if (rootProject.hasProperty("LIBS_DIRECTORY")) {
            def libsdirPath = projectDir.absolutePath + '/../../../../' +
                    rootProject.property("LIBS_DIRECTORY")
            def libsDir = new File(libsdirPath);
            if (libsDir.exists()) {
                from 'build/outputs/aar'
                into libsDir
                include '**/*.aar'
            } else {
                println "Cannot copy aar files, libs directory does not exist!"
            }
        }
    }
    tasks.copyAARFiles.execute()
}
